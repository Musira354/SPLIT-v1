{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar algo = require(\"line-segmentation-algorithm-to-gcp-vision\");\nvar GoogleVisionAPIKey = \"AIzaSyDObkkIXv2l9NxLaIfIc72vgZvpZhShBaY\";\nvar URL = \"https://vision.googleapis.com/v1/images:annotate?key=\";\nvar fullURL = \"https://vision.googleapis.com/v1/images:annotate?key=AIzaSyDObkkIXv2l9NxLaIfIc72vgZvpZhShBaY\";\nexport function getReceiptInfo(_x) {\n  return _getReceiptInfo.apply(this, arguments);\n}\nfunction _getReceiptInfo() {\n  _getReceiptInfo = _asyncToGenerator(function* (imageURL) {\n    try {\n      var body = JSON.stringify({\n        \"requests\": [{\n          \"image\": {\n            \"source\": {\n              \"imageUri\": imageURL\n            }\n          },\n          \"features\": [{\n            \"type\": \"DOCUMENT_TEXT_DETECTION\",\n            \"maxResults\": 1\n          }]\n        }]\n      });\n      var response = yield fetch(URL + GoogleVisionAPIKey, {\n        method: \"POST\",\n        body: body\n      });\n      var responseJson = yield response.json();\n      var data = responseJson.responses[0];\n      var lineByLineData = yield algo.initLineSegmentation(data);\n      return lineByLineData;\n    } catch (error) {\n      console.log(error);\n    }\n  });\n  return _getReceiptInfo.apply(this, arguments);\n}\n;","map":{"version":3,"names":["algo","require","GoogleVisionAPIKey","URL","fullURL","getReceiptInfo","_x","_getReceiptInfo","apply","arguments","_asyncToGenerator","imageURL","body","JSON","stringify","response","fetch","method","responseJson","json","data","responses","lineByLineData","initLineSegmentation","error","console","log"],"sources":["D:/Work/Projects/Split/Split/backendFiles/GoogleVision.js"],"sourcesContent":["const algo = require(\"line-segmentation-algorithm-to-gcp-vision\");\r\nconst GoogleVisionAPIKey = \"AIzaSyDObkkIXv2l9NxLaIfIc72vgZvpZhShBaY\";\r\nconst URL = \"https://vision.googleapis.com/v1/images:annotate?key=\";\r\nconst fullURL = \"https://vision.googleapis.com/v1/images:annotate?key=AIzaSyDObkkIXv2l9NxLaIfIc72vgZvpZhShBaY\";\r\n\r\nexport async function getReceiptInfo(imageURL) {\r\n    try {\r\n      let body = JSON.stringify({\r\n        \"requests\":[\r\n          {\r\n            \"image\":{\r\n              \"source\":{\r\n                \"imageUri\":\r\n                 imageURL\r\n              }\r\n            },\r\n            \"features\":[\r\n              {\r\n                \"type\":\"DOCUMENT_TEXT_DETECTION\",\r\n                \"maxResults\":1\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      });\r\n      let response = await fetch(URL + GoogleVisionAPIKey,\r\n        {\r\n          method: \"POST\",\r\n          body: body\r\n        }\r\n      );\r\n      let responseJson= await response.json();\r\n      let data = responseJson.responses[0];\r\n      let lineByLineData = await algo.initLineSegmentation(data);\r\n      return lineByLineData;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };"],"mappings":";AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,2CAA2C,CAAC;AACjE,IAAMC,kBAAkB,GAAG,yCAAyC;AACpE,IAAMC,GAAG,GAAG,uDAAuD;AACnE,IAAMC,OAAO,GAAG,8FAA8F;AAE9G,gBAAsBC,cAAcA,CAAAC,EAAA;EAAA,OAAAC,eAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAiCjC,SAAAF,gBAAA;EAAAA,eAAA,GAAAG,iBAAA,CAjCI,WAA8BC,QAAQ,EAAE;IAC3C,IAAI;MACF,IAAIC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;QACxB,UAAU,EAAC,CACT;UACE,OAAO,EAAC;YACN,QAAQ,EAAC;cACP,UAAU,EACTH;YACH;UACF,CAAC;UACD,UAAU,EAAC,CACT;YACE,MAAM,EAAC,yBAAyB;YAChC,YAAY,EAAC;UACf,CAAC;QAEL,CAAC;MAEL,CAAC,CAAC;MACF,IAAII,QAAQ,SAASC,KAAK,CAACb,GAAG,GAAGD,kBAAkB,EACjD;QACEe,MAAM,EAAE,MAAM;QACdL,IAAI,EAAEA;MACR,CAAC,CACF;MACD,IAAIM,YAAY,SAAQH,QAAQ,CAACI,IAAI,EAAE;MACvC,IAAIC,IAAI,GAAGF,YAAY,CAACG,SAAS,CAAC,CAAC,CAAC;MACpC,IAAIC,cAAc,SAAStB,IAAI,CAACuB,oBAAoB,CAACH,IAAI,CAAC;MAC1D,OAAOE,cAAc;IACvB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF,CAAC;EAAA,OAAAjB,eAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}